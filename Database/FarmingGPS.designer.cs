#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FarmingGPS.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FarmingDatabase")]
	public partial class FarmingGPSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEquipment(Equipment instance);
    partial void UpdateEquipment(Equipment instance);
    partial void DeleteEquipment(Equipment instance);
    partial void InsertVechileAttach(VechileAttach instance);
    partial void UpdateVechileAttach(VechileAttach instance);
    partial void DeleteVechileAttach(VechileAttach instance);
    partial void InsertField(Field instance);
    partial void UpdateField(Field instance);
    partial void DeleteField(Field instance);
    partial void InsertFieldBoundary(FieldBoundary instance);
    partial void UpdateFieldBoundary(FieldBoundary instance);
    partial void DeleteFieldBoundary(FieldBoundary instance);
    partial void InsertFieldRecording(FieldRecording instance);
    partial void UpdateFieldRecording(FieldRecording instance);
    partial void DeleteFieldRecording(FieldRecording instance);
    partial void InsertGpsCoordinate(GpsCoordinate instance);
    partial void UpdateGpsCoordinate(GpsCoordinate instance);
    partial void DeleteGpsCoordinate(GpsCoordinate instance);
    partial void InsertObstacle(Obstacle instance);
    partial void UpdateObstacle(Obstacle instance);
    partial void DeleteObstacle(Obstacle instance);
    partial void InsertRecordingPosition(RecordingPosition instance);
    partial void UpdateRecordingPosition(RecordingPosition instance);
    partial void DeleteRecordingPosition(RecordingPosition instance);
    partial void InsertReminder(Reminder instance);
    partial void UpdateReminder(Reminder instance);
    partial void DeleteReminder(Reminder instance);
    partial void InsertSubFieldIntersect(SubFieldIntersect instance);
    partial void UpdateSubFieldIntersect(SubFieldIntersect instance);
    partial void DeleteSubFieldIntersect(SubFieldIntersect instance);
    partial void InsertVechile(Vechile instance);
    partial void UpdateVechile(Vechile instance);
    partial void DeleteVechile(Vechile instance);
    partial void InsertFertilizerType(FertilizerType instance);
    partial void UpdateFertilizerType(FertilizerType instance);
    partial void DeleteFertilizerType(FertilizerType instance);
    partial void InsertSeedType(SeedType instance);
    partial void UpdateSeedType(SeedType instance);
    partial void DeleteSeedType(SeedType instance);
    partial void InsertWorkArea(WorkArea instance);
    partial void UpdateWorkArea(WorkArea instance);
    partial void DeleteWorkArea(WorkArea instance);
    partial void InsertDrainageLine(DrainageLine instance);
    partial void UpdateDrainageLine(DrainageLine instance);
    partial void DeleteDrainageLine(DrainageLine instance);
    partial void InsertDrainage(Drainage instance);
    partial void UpdateDrainage(Drainage instance);
    partial void DeleteDrainage(Drainage instance);
    partial void InsertMaintenance(Maintenance instance);
    partial void UpdateMaintenance(Maintenance instance);
    partial void DeleteMaintenance(Maintenance instance);
    partial void InsertWork(Work instance);
    partial void UpdateWork(Work instance);
    partial void DeleteWork(Work instance);
    #endregion
		
		public FarmingGPSDataContext() : 
				base(global::FarmingGPS.Database.Properties.Settings.Default.FarmingDatabaseConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public FarmingGPSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FarmingGPSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FarmingGPSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FarmingGPSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Equipment> Equipments
		{
			get
			{
				return this.GetTable<Equipment>();
			}
		}
		
		public System.Data.Linq.Table<VechileAttach> VechileAttaches
		{
			get
			{
				return this.GetTable<VechileAttach>();
			}
		}
		
		public System.Data.Linq.Table<Field> Fields
		{
			get
			{
				return this.GetTable<Field>();
			}
		}
		
		public System.Data.Linq.Table<FieldBoundary> FieldBoundaries
		{
			get
			{
				return this.GetTable<FieldBoundary>();
			}
		}
		
		public System.Data.Linq.Table<FieldRecording> FieldRecordings
		{
			get
			{
				return this.GetTable<FieldRecording>();
			}
		}
		
		public System.Data.Linq.Table<GpsCoordinate> GpsCoordinates
		{
			get
			{
				return this.GetTable<GpsCoordinate>();
			}
		}
		
		public System.Data.Linq.Table<Obstacle> Obstacles
		{
			get
			{
				return this.GetTable<Obstacle>();
			}
		}
		
		public System.Data.Linq.Table<RecordingPosition> RecordingPositions
		{
			get
			{
				return this.GetTable<RecordingPosition>();
			}
		}
		
		public System.Data.Linq.Table<Reminder> Reminders
		{
			get
			{
				return this.GetTable<Reminder>();
			}
		}
		
		public System.Data.Linq.Table<SubFieldIntersect> SubFieldIntersects
		{
			get
			{
				return this.GetTable<SubFieldIntersect>();
			}
		}
		
		public System.Data.Linq.Table<Vechile> Vechiles
		{
			get
			{
				return this.GetTable<Vechile>();
			}
		}
		
		public System.Data.Linq.Table<FertilizerType> FertilizerTypes
		{
			get
			{
				return this.GetTable<FertilizerType>();
			}
		}
		
		public System.Data.Linq.Table<SeedType> SeedTypes
		{
			get
			{
				return this.GetTable<SeedType>();
			}
		}
		
		public System.Data.Linq.Table<WorkArea> WorkAreas
		{
			get
			{
				return this.GetTable<WorkArea>();
			}
		}
		
		public System.Data.Linq.Table<DrainageLine> DrainageLines
		{
			get
			{
				return this.GetTable<DrainageLine>();
			}
		}
		
		public System.Data.Linq.Table<Drainage> Drainages
		{
			get
			{
				return this.GetTable<Drainage>();
			}
		}
		
		public System.Data.Linq.Table<Maintenance> Maintenances
		{
			get
			{
				return this.GetTable<Maintenance>();
			}
		}
		
		public System.Data.Linq.Table<Work> Works
		{
			get
			{
				return this.GetTable<Work>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Equipment")]
	public partial class Equipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EquipmentId;
		
		private string _Name;
		
		private double _DistFromAttach;
		
		private double _AngleFromAttach;
		
		private double _WorkWidth;
		
		private string _EquipmentClass;
		
		private EntitySet<FieldRecording> _FieldRecordings;
		
		private EntitySet<Maintenance> _Maintenances;
		
		private EntitySet<Work> _Works;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEquipmentIdChanging(int value);
    partial void OnEquipmentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDistFromAttachChanging(double value);
    partial void OnDistFromAttachChanged();
    partial void OnAngleFromAttachChanging(double value);
    partial void OnAngleFromAttachChanged();
    partial void OnWorkWidthChanging(double value);
    partial void OnWorkWidthChanged();
    partial void OnEquipmentClassChanging(string value);
    partial void OnEquipmentClassChanged();
    #endregion
		
		public Equipment()
		{
			this._FieldRecordings = new EntitySet<FieldRecording>(new Action<FieldRecording>(this.attach_FieldRecordings), new Action<FieldRecording>(this.detach_FieldRecordings));
			this._Maintenances = new EntitySet<Maintenance>(new Action<Maintenance>(this.attach_Maintenances), new Action<Maintenance>(this.detach_Maintenances));
			this._Works = new EntitySet<Work>(new Action<Work>(this.attach_Works), new Action<Work>(this.detach_Works));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EquipmentId
		{
			get
			{
				return this._EquipmentId;
			}
			set
			{
				if ((this._EquipmentId != value))
				{
					this.OnEquipmentIdChanging(value);
					this.SendPropertyChanging();
					this._EquipmentId = value;
					this.SendPropertyChanged("EquipmentId");
					this.OnEquipmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistFromAttach", DbType="Float NOT NULL")]
		public double DistFromAttach
		{
			get
			{
				return this._DistFromAttach;
			}
			set
			{
				if ((this._DistFromAttach != value))
				{
					this.OnDistFromAttachChanging(value);
					this.SendPropertyChanging();
					this._DistFromAttach = value;
					this.SendPropertyChanged("DistFromAttach");
					this.OnDistFromAttachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AngleFromAttach", DbType="Float NOT NULL")]
		public double AngleFromAttach
		{
			get
			{
				return this._AngleFromAttach;
			}
			set
			{
				if ((this._AngleFromAttach != value))
				{
					this.OnAngleFromAttachChanging(value);
					this.SendPropertyChanging();
					this._AngleFromAttach = value;
					this.SendPropertyChanged("AngleFromAttach");
					this.OnAngleFromAttachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkWidth", DbType="Float NOT NULL")]
		public double WorkWidth
		{
			get
			{
				return this._WorkWidth;
			}
			set
			{
				if ((this._WorkWidth != value))
				{
					this.OnWorkWidthChanging(value);
					this.SendPropertyChanging();
					this._WorkWidth = value;
					this.SendPropertyChanged("WorkWidth");
					this.OnWorkWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentClass", DbType="VarChar(50)", CanBeNull=false)]
		public string EquipmentClass
		{
			get
			{
				return this._EquipmentClass;
			}
			set
			{
				if ((this._EquipmentClass != value))
				{
					this.OnEquipmentClassChanging(value);
					this.SendPropertyChanging();
					this._EquipmentClass = value;
					this.SendPropertyChanged("EquipmentClass");
					this.OnEquipmentClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_FieldRecording", Storage="_FieldRecordings", ThisKey="EquipmentId", OtherKey="EquipmentId")]
		public EntitySet<FieldRecording> FieldRecordings
		{
			get
			{
				return this._FieldRecordings;
			}
			set
			{
				this._FieldRecordings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_Maintenance", Storage="_Maintenances", ThisKey="EquipmentId", OtherKey="EquipmentId")]
		public EntitySet<Maintenance> Maintenances
		{
			get
			{
				return this._Maintenances;
			}
			set
			{
				this._Maintenances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_Work", Storage="_Works", ThisKey="EquipmentId", OtherKey="EquipmentId")]
		public EntitySet<Work> Works
		{
			get
			{
				return this._Works;
			}
			set
			{
				this._Works.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FieldRecordings(FieldRecording entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = this;
		}
		
		private void detach_FieldRecordings(FieldRecording entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = null;
		}
		
		private void attach_Maintenances(Maintenance entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = this;
		}
		
		private void detach_Maintenances(Maintenance entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = null;
		}
		
		private void attach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = this;
		}
		
		private void detach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VechileAttach")]
	public partial class VechileAttach : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VechileAttachId;
		
		private int _VechileId;
		
		private string _Name;
		
		private float _AttachDistFromCenter;
		
		private float _AttachAngleFromCenter;
		
		private EntityRef<Vechile> _Vechile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVechileAttachIdChanging(int value);
    partial void OnVechileAttachIdChanged();
    partial void OnVechileIdChanging(int value);
    partial void OnVechileIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAttachDistFromCenterChanging(float value);
    partial void OnAttachDistFromCenterChanged();
    partial void OnAttachAngleFromCenterChanging(float value);
    partial void OnAttachAngleFromCenterChanged();
    #endregion
		
		public VechileAttach()
		{
			this._Vechile = default(EntityRef<Vechile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VechileAttachId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VechileAttachId
		{
			get
			{
				return this._VechileAttachId;
			}
			set
			{
				if ((this._VechileAttachId != value))
				{
					this.OnVechileAttachIdChanging(value);
					this.SendPropertyChanging();
					this._VechileAttachId = value;
					this.SendPropertyChanged("VechileAttachId");
					this.OnVechileAttachIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VechileId", DbType="Int NOT NULL")]
		public int VechileId
		{
			get
			{
				return this._VechileId;
			}
			set
			{
				if ((this._VechileId != value))
				{
					if (this._Vechile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVechileIdChanging(value);
					this.SendPropertyChanging();
					this._VechileId = value;
					this.SendPropertyChanged("VechileId");
					this.OnVechileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachDistFromCenter", DbType="Real NOT NULL")]
		public float AttachDistFromCenter
		{
			get
			{
				return this._AttachDistFromCenter;
			}
			set
			{
				if ((this._AttachDistFromCenter != value))
				{
					this.OnAttachDistFromCenterChanging(value);
					this.SendPropertyChanging();
					this._AttachDistFromCenter = value;
					this.SendPropertyChanged("AttachDistFromCenter");
					this.OnAttachDistFromCenterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachAngleFromCenter", DbType="Real NOT NULL")]
		public float AttachAngleFromCenter
		{
			get
			{
				return this._AttachAngleFromCenter;
			}
			set
			{
				if ((this._AttachAngleFromCenter != value))
				{
					this.OnAttachAngleFromCenterChanging(value);
					this.SendPropertyChanging();
					this._AttachAngleFromCenter = value;
					this.SendPropertyChanged("AttachAngleFromCenter");
					this.OnAttachAngleFromCenterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vechile_VechileAttach", Storage="_Vechile", ThisKey="VechileId", OtherKey="VechileId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Vechile Vechile
		{
			get
			{
				return this._Vechile.Entity;
			}
			set
			{
				Vechile previousValue = this._Vechile.Entity;
				if (((previousValue != value) 
							|| (this._Vechile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vechile.Entity = null;
						previousValue.VechileAttaches.Remove(this);
					}
					this._Vechile.Entity = value;
					if ((value != null))
					{
						value.VechileAttaches.Add(this);
						this._VechileId = value.VechileId;
					}
					else
					{
						this._VechileId = default(int);
					}
					this.SendPropertyChanged("Vechile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Field")]
	public partial class Field : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldId;
		
		private string _FieldName;
		
		private System.Nullable<int> _ParentField;
		
		private EntitySet<Field> _Fields;
		
		private EntitySet<FieldBoundary> _FieldBoundaries;
		
		private EntitySet<FieldRecording> _FieldRecordings;
		
		private EntitySet<SubFieldIntersect> _SubFieldIntersects;
		
		private EntitySet<Work> _Works;
		
		private EntityRef<Field> _Field1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIdChanging(int value);
    partial void OnFieldIdChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnParentFieldChanging(System.Nullable<int> value);
    partial void OnParentFieldChanged();
    #endregion
		
		public Field()
		{
			this._Fields = new EntitySet<Field>(new Action<Field>(this.attach_Fields), new Action<Field>(this.detach_Fields));
			this._FieldBoundaries = new EntitySet<FieldBoundary>(new Action<FieldBoundary>(this.attach_FieldBoundaries), new Action<FieldBoundary>(this.detach_FieldBoundaries));
			this._FieldRecordings = new EntitySet<FieldRecording>(new Action<FieldRecording>(this.attach_FieldRecordings), new Action<FieldRecording>(this.detach_FieldRecordings));
			this._SubFieldIntersects = new EntitySet<SubFieldIntersect>(new Action<SubFieldIntersect>(this.attach_SubFieldIntersects), new Action<SubFieldIntersect>(this.detach_SubFieldIntersects));
			this._Works = new EntitySet<Work>(new Action<Work>(this.attach_Works), new Action<Work>(this.detach_Works));
			this._Field1 = default(EntityRef<Field>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentField", DbType="Int")]
		public System.Nullable<int> ParentField
		{
			get
			{
				return this._ParentField;
			}
			set
			{
				if ((this._ParentField != value))
				{
					if (this._Field1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentFieldChanging(value);
					this.SendPropertyChanging();
					this._ParentField = value;
					this.SendPropertyChanged("ParentField");
					this.OnParentFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Field", Storage="_Fields", ThisKey="FieldId", OtherKey="ParentField")]
		public EntitySet<Field> Fields
		{
			get
			{
				return this._Fields;
			}
			set
			{
				this._Fields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_FieldBoundary", Storage="_FieldBoundaries", ThisKey="FieldId", OtherKey="FieldId")]
		public EntitySet<FieldBoundary> FieldBoundaries
		{
			get
			{
				return this._FieldBoundaries;
			}
			set
			{
				this._FieldBoundaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_FieldRecording", Storage="_FieldRecordings", ThisKey="FieldId", OtherKey="FieldId")]
		public EntitySet<FieldRecording> FieldRecordings
		{
			get
			{
				return this._FieldRecordings;
			}
			set
			{
				this._FieldRecordings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_SubFieldIntersect", Storage="_SubFieldIntersects", ThisKey="FieldId", OtherKey="FieldId")]
		public EntitySet<SubFieldIntersect> SubFieldIntersects
		{
			get
			{
				return this._SubFieldIntersects;
			}
			set
			{
				this._SubFieldIntersects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Work", Storage="_Works", ThisKey="FieldId", OtherKey="FieldId")]
		public EntitySet<Work> Works
		{
			get
			{
				return this._Works;
			}
			set
			{
				this._Works.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Field", Storage="_Field1", ThisKey="ParentField", OtherKey="FieldId", IsForeignKey=true)]
		public Field FieldParent
		{
			get
			{
				return this._Field1.Entity;
			}
			set
			{
				Field previousValue = this._Field1.Entity;
				if (((previousValue != value) 
							|| (this._Field1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field1.Entity = null;
						previousValue.Fields.Remove(this);
					}
					this._Field1.Entity = value;
					if ((value != null))
					{
						value.Fields.Add(this);
						this._ParentField = value.FieldId;
					}
					else
					{
						this._ParentField = default(Nullable<int>);
					}
					this.SendPropertyChanged("FieldParent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fields(Field entity)
		{
			this.SendPropertyChanging();
			entity.FieldParent = this;
		}
		
		private void detach_Fields(Field entity)
		{
			this.SendPropertyChanging();
			entity.FieldParent = null;
		}
		
		private void attach_FieldBoundaries(FieldBoundary entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_FieldBoundaries(FieldBoundary entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
		
		private void attach_FieldRecordings(FieldRecording entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_FieldRecordings(FieldRecording entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
		
		private void attach_SubFieldIntersects(SubFieldIntersect entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_SubFieldIntersects(SubFieldIntersect entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
		
		private void attach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldBoundary")]
	public partial class FieldBoundary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldBoundId;
		
		private int _FieldId;
		
		private int _PosId;
		
		private int _OrderId;
		
		private EntityRef<Field> _Field;
		
		private EntityRef<GpsCoordinate> _GpsCoordinate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldBoundIdChanging(int value);
    partial void OnFieldBoundIdChanged();
    partial void OnFieldIdChanging(int value);
    partial void OnFieldIdChanged();
    partial void OnPosIdChanging(int value);
    partial void OnPosIdChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    #endregion
		
		public FieldBoundary()
		{
			this._Field = default(EntityRef<Field>);
			this._GpsCoordinate = default(EntityRef<GpsCoordinate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldBoundId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FieldBoundId
		{
			get
			{
				return this._FieldBoundId;
			}
			set
			{
				if ((this._FieldBoundId != value))
				{
					this.OnFieldBoundIdChanging(value);
					this.SendPropertyChanging();
					this._FieldBoundId = value;
					this.SendPropertyChanged("FieldBoundId");
					this.OnFieldBoundIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="Int NOT NULL")]
		public int FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosId", DbType="Int NOT NULL")]
		public int PosId
		{
			get
			{
				return this._PosId;
			}
			set
			{
				if ((this._PosId != value))
				{
					if (this._GpsCoordinate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPosIdChanging(value);
					this.SendPropertyChanging();
					this._PosId = value;
					this.SendPropertyChanged("PosId");
					this.OnPosIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_FieldBoundary", Storage="_Field", ThisKey="FieldId", OtherKey="FieldId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.FieldBoundaries.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.FieldBoundaries.Add(this);
						this._FieldId = value.FieldId;
					}
					else
					{
						this._FieldId = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_FieldBoundary", Storage="_GpsCoordinate", ThisKey="PosId", OtherKey="PosId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GpsCoordinate GpsCoordinate
		{
			get
			{
				return this._GpsCoordinate.Entity;
			}
			set
			{
				GpsCoordinate previousValue = this._GpsCoordinate.Entity;
				if (((previousValue != value) 
							|| (this._GpsCoordinate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GpsCoordinate.Entity = null;
						previousValue.FieldBoundaries.Remove(this);
					}
					this._GpsCoordinate.Entity = value;
					if ((value != null))
					{
						value.FieldBoundaries.Add(this);
						this._PosId = value.PosId;
					}
					else
					{
						this._PosId = default(int);
					}
					this.SendPropertyChanged("GpsCoordinate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldRecording")]
	public partial class FieldRecording : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordingId;
		
		private System.DateTime _DateTime;
		
		private int _FieldId;
		
		private int _EquipmentId;
		
		private EntitySet<RecordingPosition> _RecordingPositions;
		
		private EntityRef<Equipment> _Equipment;
		
		private EntityRef<Field> _Field;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordingIdChanging(int value);
    partial void OnRecordingIdChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnFieldIdChanging(int value);
    partial void OnFieldIdChanged();
    partial void OnEquipmentIdChanging(int value);
    partial void OnEquipmentIdChanged();
    #endregion
		
		public FieldRecording()
		{
			this._RecordingPositions = new EntitySet<RecordingPosition>(new Action<RecordingPosition>(this.attach_RecordingPositions), new Action<RecordingPosition>(this.detach_RecordingPositions));
			this._Equipment = default(EntityRef<Equipment>);
			this._Field = default(EntityRef<Field>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordingId
		{
			get
			{
				return this._RecordingId;
			}
			set
			{
				if ((this._RecordingId != value))
				{
					this.OnRecordingIdChanging(value);
					this.SendPropertyChanging();
					this._RecordingId = value;
					this.SendPropertyChanged("RecordingId");
					this.OnRecordingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="Int NOT NULL")]
		public int FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentId", DbType="Int NOT NULL")]
		public int EquipmentId
		{
			get
			{
				return this._EquipmentId;
			}
			set
			{
				if ((this._EquipmentId != value))
				{
					if (this._Equipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEquipmentIdChanging(value);
					this.SendPropertyChanging();
					this._EquipmentId = value;
					this.SendPropertyChanged("EquipmentId");
					this.OnEquipmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldRecording_RecordingPosition", Storage="_RecordingPositions", ThisKey="RecordingId", OtherKey="RecordingId")]
		public EntitySet<RecordingPosition> RecordingPositions
		{
			get
			{
				return this._RecordingPositions;
			}
			set
			{
				this._RecordingPositions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_FieldRecording", Storage="_Equipment", ThisKey="EquipmentId", OtherKey="EquipmentId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Equipment Equipment
		{
			get
			{
				return this._Equipment.Entity;
			}
			set
			{
				Equipment previousValue = this._Equipment.Entity;
				if (((previousValue != value) 
							|| (this._Equipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipment.Entity = null;
						previousValue.FieldRecordings.Remove(this);
					}
					this._Equipment.Entity = value;
					if ((value != null))
					{
						value.FieldRecordings.Add(this);
						this._EquipmentId = value.EquipmentId;
					}
					else
					{
						this._EquipmentId = default(int);
					}
					this.SendPropertyChanged("Equipment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_FieldRecording", Storage="_Field", ThisKey="FieldId", OtherKey="FieldId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.FieldRecordings.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.FieldRecordings.Add(this);
						this._FieldId = value.FieldId;
					}
					else
					{
						this._FieldId = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RecordingPositions(RecordingPosition entity)
		{
			this.SendPropertyChanging();
			entity.FieldRecording = this;
		}
		
		private void detach_RecordingPositions(RecordingPosition entity)
		{
			this.SendPropertyChanging();
			entity.FieldRecording = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GpsCoordinate")]
	public partial class GpsCoordinate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PosId;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private double _Altitude;
		
		private EntitySet<FieldBoundary> _FieldBoundaries;
		
		private EntitySet<Obstacle> _Obstacles;
		
		private EntitySet<RecordingPosition> _RecordingPositions;
		
		private EntitySet<Reminder> _Reminders;
		
		private EntitySet<SubFieldIntersect> _SubFieldIntersects;
		
		private EntitySet<SubFieldIntersect> _SubFieldIntersects1;
		
		private EntitySet<WorkArea> _WorkAreas;
		
		private EntitySet<DrainageLine> _DrainageLines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPosIdChanging(int value);
    partial void OnPosIdChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnAltitudeChanging(double value);
    partial void OnAltitudeChanged();
    #endregion
		
		public GpsCoordinate()
		{
			this._FieldBoundaries = new EntitySet<FieldBoundary>(new Action<FieldBoundary>(this.attach_FieldBoundaries), new Action<FieldBoundary>(this.detach_FieldBoundaries));
			this._Obstacles = new EntitySet<Obstacle>(new Action<Obstacle>(this.attach_Obstacles), new Action<Obstacle>(this.detach_Obstacles));
			this._RecordingPositions = new EntitySet<RecordingPosition>(new Action<RecordingPosition>(this.attach_RecordingPositions), new Action<RecordingPosition>(this.detach_RecordingPositions));
			this._Reminders = new EntitySet<Reminder>(new Action<Reminder>(this.attach_Reminders), new Action<Reminder>(this.detach_Reminders));
			this._SubFieldIntersects = new EntitySet<SubFieldIntersect>(new Action<SubFieldIntersect>(this.attach_SubFieldIntersects), new Action<SubFieldIntersect>(this.detach_SubFieldIntersects));
			this._SubFieldIntersects1 = new EntitySet<SubFieldIntersect>(new Action<SubFieldIntersect>(this.attach_SubFieldIntersects1), new Action<SubFieldIntersect>(this.detach_SubFieldIntersects1));
			this._WorkAreas = new EntitySet<WorkArea>(new Action<WorkArea>(this.attach_WorkAreas), new Action<WorkArea>(this.detach_WorkAreas));
			this._DrainageLines = new EntitySet<DrainageLine>(new Action<DrainageLine>(this.attach_DrainageLines), new Action<DrainageLine>(this.detach_DrainageLines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PosId
		{
			get
			{
				return this._PosId;
			}
			set
			{
				if ((this._PosId != value))
				{
					this.OnPosIdChanging(value);
					this.SendPropertyChanging();
					this._PosId = value;
					this.SendPropertyChanged("PosId");
					this.OnPosIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Altitude", DbType="Float")]
		public double Altitude
		{
			get
			{
				return this._Altitude;
			}
			set
			{
				if ((this._Altitude != value))
				{
					this.OnAltitudeChanging(value);
					this.SendPropertyChanging();
					this._Altitude = value;
					this.SendPropertyChanged("Altitude");
					this.OnAltitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_FieldBoundary", Storage="_FieldBoundaries", ThisKey="PosId", OtherKey="PosId")]
		public EntitySet<FieldBoundary> FieldBoundaries
		{
			get
			{
				return this._FieldBoundaries;
			}
			set
			{
				this._FieldBoundaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_Obstacle", Storage="_Obstacles", ThisKey="PosId", OtherKey="PosId")]
		public EntitySet<Obstacle> Obstacles
		{
			get
			{
				return this._Obstacles;
			}
			set
			{
				this._Obstacles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_RecordingPosition", Storage="_RecordingPositions", ThisKey="PosId", OtherKey="PosId")]
		public EntitySet<RecordingPosition> RecordingPositions
		{
			get
			{
				return this._RecordingPositions;
			}
			set
			{
				this._RecordingPositions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_Reminder", Storage="_Reminders", ThisKey="PosId", OtherKey="PosId")]
		public EntitySet<Reminder> Reminders
		{
			get
			{
				return this._Reminders;
			}
			set
			{
				this._Reminders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_SubFieldIntersect", Storage="_SubFieldIntersects", ThisKey="PosId", OtherKey="FirstPosId")]
		public EntitySet<SubFieldIntersect> SubFieldIntersects
		{
			get
			{
				return this._SubFieldIntersects;
			}
			set
			{
				this._SubFieldIntersects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_SubFieldIntersect1", Storage="_SubFieldIntersects1", ThisKey="PosId", OtherKey="SecondPosId")]
		public EntitySet<SubFieldIntersect> SubFieldIntersects1
		{
			get
			{
				return this._SubFieldIntersects1;
			}
			set
			{
				this._SubFieldIntersects1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_WorkArea", Storage="_WorkAreas", ThisKey="PosId", OtherKey="PosId")]
		public EntitySet<WorkArea> WorkAreas
		{
			get
			{
				return this._WorkAreas;
			}
			set
			{
				this._WorkAreas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_DrainageLine", Storage="_DrainageLines", ThisKey="PosId", OtherKey="PosId")]
		public EntitySet<DrainageLine> DrainageLines
		{
			get
			{
				return this._DrainageLines;
			}
			set
			{
				this._DrainageLines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FieldBoundaries(FieldBoundary entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = this;
		}
		
		private void detach_FieldBoundaries(FieldBoundary entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = null;
		}
		
		private void attach_Obstacles(Obstacle entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = this;
		}
		
		private void detach_Obstacles(Obstacle entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = null;
		}
		
		private void attach_RecordingPositions(RecordingPosition entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = this;
		}
		
		private void detach_RecordingPositions(RecordingPosition entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = null;
		}
		
		private void attach_Reminders(Reminder entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = this;
		}
		
		private void detach_Reminders(Reminder entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = null;
		}
		
		private void attach_SubFieldIntersects(SubFieldIntersect entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinateFirst = this;
		}
		
		private void detach_SubFieldIntersects(SubFieldIntersect entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinateFirst = null;
		}
		
		private void attach_SubFieldIntersects1(SubFieldIntersect entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinateSecond = this;
		}
		
		private void detach_SubFieldIntersects1(SubFieldIntersect entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinateSecond = null;
		}
		
		private void attach_WorkAreas(WorkArea entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = this;
		}
		
		private void detach_WorkAreas(WorkArea entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = null;
		}
		
		private void attach_DrainageLines(DrainageLine entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = this;
		}
		
		private void detach_DrainageLines(DrainageLine entity)
		{
			this.SendPropertyChanging();
			entity.GpsCoordinate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Obstacle")]
	public partial class Obstacle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObstacleId;
		
		private int _Type;
		
		private int _PosId;
		
		private EntityRef<GpsCoordinate> _GpsCoordinate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObstacleIdChanging(int value);
    partial void OnObstacleIdChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnPosIdChanging(int value);
    partial void OnPosIdChanged();
    #endregion
		
		public Obstacle()
		{
			this._GpsCoordinate = default(EntityRef<GpsCoordinate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObstacleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ObstacleId
		{
			get
			{
				return this._ObstacleId;
			}
			set
			{
				if ((this._ObstacleId != value))
				{
					this.OnObstacleIdChanging(value);
					this.SendPropertyChanging();
					this._ObstacleId = value;
					this.SendPropertyChanged("ObstacleId");
					this.OnObstacleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosId", DbType="Int NOT NULL")]
		public int PosId
		{
			get
			{
				return this._PosId;
			}
			set
			{
				if ((this._PosId != value))
				{
					if (this._GpsCoordinate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPosIdChanging(value);
					this.SendPropertyChanging();
					this._PosId = value;
					this.SendPropertyChanged("PosId");
					this.OnPosIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_Obstacle", Storage="_GpsCoordinate", ThisKey="PosId", OtherKey="PosId", IsForeignKey=true)]
		public GpsCoordinate GpsCoordinate
		{
			get
			{
				return this._GpsCoordinate.Entity;
			}
			set
			{
				GpsCoordinate previousValue = this._GpsCoordinate.Entity;
				if (((previousValue != value) 
							|| (this._GpsCoordinate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GpsCoordinate.Entity = null;
						previousValue.Obstacles.Remove(this);
					}
					this._GpsCoordinate.Entity = value;
					if ((value != null))
					{
						value.Obstacles.Add(this);
						this._PosId = value.PosId;
					}
					else
					{
						this._PosId = default(int);
					}
					this.SendPropertyChanged("GpsCoordinate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecordingPosition")]
	public partial class RecordingPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordPosId;
		
		private int _RecordingId;
		
		private int _PosId;
		
		private EntityRef<FieldRecording> _FieldRecording;
		
		private EntityRef<GpsCoordinate> _GpsCoordinate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordPosIdChanging(int value);
    partial void OnRecordPosIdChanged();
    partial void OnRecordingIdChanging(int value);
    partial void OnRecordingIdChanged();
    partial void OnPosIdChanging(int value);
    partial void OnPosIdChanged();
    #endregion
		
		public RecordingPosition()
		{
			this._FieldRecording = default(EntityRef<FieldRecording>);
			this._GpsCoordinate = default(EntityRef<GpsCoordinate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordPosId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordPosId
		{
			get
			{
				return this._RecordPosId;
			}
			set
			{
				if ((this._RecordPosId != value))
				{
					this.OnRecordPosIdChanging(value);
					this.SendPropertyChanging();
					this._RecordPosId = value;
					this.SendPropertyChanged("RecordPosId");
					this.OnRecordPosIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordingId", DbType="Int NOT NULL")]
		public int RecordingId
		{
			get
			{
				return this._RecordingId;
			}
			set
			{
				if ((this._RecordingId != value))
				{
					if (this._FieldRecording.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordingIdChanging(value);
					this.SendPropertyChanging();
					this._RecordingId = value;
					this.SendPropertyChanged("RecordingId");
					this.OnRecordingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosId", DbType="Int NOT NULL")]
		public int PosId
		{
			get
			{
				return this._PosId;
			}
			set
			{
				if ((this._PosId != value))
				{
					if (this._GpsCoordinate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPosIdChanging(value);
					this.SendPropertyChanging();
					this._PosId = value;
					this.SendPropertyChanged("PosId");
					this.OnPosIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldRecording_RecordingPosition", Storage="_FieldRecording", ThisKey="RecordingId", OtherKey="RecordingId", IsForeignKey=true)]
		public FieldRecording FieldRecording
		{
			get
			{
				return this._FieldRecording.Entity;
			}
			set
			{
				FieldRecording previousValue = this._FieldRecording.Entity;
				if (((previousValue != value) 
							|| (this._FieldRecording.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldRecording.Entity = null;
						previousValue.RecordingPositions.Remove(this);
					}
					this._FieldRecording.Entity = value;
					if ((value != null))
					{
						value.RecordingPositions.Add(this);
						this._RecordingId = value.RecordingId;
					}
					else
					{
						this._RecordingId = default(int);
					}
					this.SendPropertyChanged("FieldRecording");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_RecordingPosition", Storage="_GpsCoordinate", ThisKey="PosId", OtherKey="PosId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GpsCoordinate GpsCoordinate
		{
			get
			{
				return this._GpsCoordinate.Entity;
			}
			set
			{
				GpsCoordinate previousValue = this._GpsCoordinate.Entity;
				if (((previousValue != value) 
							|| (this._GpsCoordinate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GpsCoordinate.Entity = null;
						previousValue.RecordingPositions.Remove(this);
					}
					this._GpsCoordinate.Entity = value;
					if ((value != null))
					{
						value.RecordingPositions.Add(this);
						this._PosId = value.PosId;
					}
					else
					{
						this._PosId = default(int);
					}
					this.SendPropertyChanged("GpsCoordinate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reminder")]
	public partial class Reminder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReminderId;
		
		private int _Type;
		
		private int _PosId;
		
		private EntityRef<GpsCoordinate> _GpsCoordinate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReminderIdChanging(int value);
    partial void OnReminderIdChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnPosIdChanging(int value);
    partial void OnPosIdChanged();
    #endregion
		
		public Reminder()
		{
			this._GpsCoordinate = default(EntityRef<GpsCoordinate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReminderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReminderId
		{
			get
			{
				return this._ReminderId;
			}
			set
			{
				if ((this._ReminderId != value))
				{
					this.OnReminderIdChanging(value);
					this.SendPropertyChanging();
					this._ReminderId = value;
					this.SendPropertyChanged("ReminderId");
					this.OnReminderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosId", DbType="Int NOT NULL")]
		public int PosId
		{
			get
			{
				return this._PosId;
			}
			set
			{
				if ((this._PosId != value))
				{
					if (this._GpsCoordinate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPosIdChanging(value);
					this.SendPropertyChanging();
					this._PosId = value;
					this.SendPropertyChanged("PosId");
					this.OnPosIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_Reminder", Storage="_GpsCoordinate", ThisKey="PosId", OtherKey="PosId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GpsCoordinate GpsCoordinate
		{
			get
			{
				return this._GpsCoordinate.Entity;
			}
			set
			{
				GpsCoordinate previousValue = this._GpsCoordinate.Entity;
				if (((previousValue != value) 
							|| (this._GpsCoordinate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GpsCoordinate.Entity = null;
						previousValue.Reminders.Remove(this);
					}
					this._GpsCoordinate.Entity = value;
					if ((value != null))
					{
						value.Reminders.Add(this);
						this._PosId = value.PosId;
					}
					else
					{
						this._PosId = default(int);
					}
					this.SendPropertyChanged("GpsCoordinate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubFieldIntersect")]
	public partial class SubFieldIntersect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubFieldIntersectId;
		
		private int _FieldId;
		
		private int _FirstPosId;
		
		private int _SecondPosId;
		
		private string _Name;
		
		private EntityRef<Field> _Field;
		
		private EntityRef<GpsCoordinate> _GpsCoordinateFirst;
		
		private EntityRef<GpsCoordinate> _GpsCoordinateSecond;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubFieldIntersectIdChanging(int value);
    partial void OnSubFieldIntersectIdChanged();
    partial void OnFieldIdChanging(int value);
    partial void OnFieldIdChanged();
    partial void OnFirstPosIdChanging(int value);
    partial void OnFirstPosIdChanged();
    partial void OnSecondPosIdChanging(int value);
    partial void OnSecondPosIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SubFieldIntersect()
		{
			this._Field = default(EntityRef<Field>);
			this._GpsCoordinateFirst = default(EntityRef<GpsCoordinate>);
			this._GpsCoordinateSecond = default(EntityRef<GpsCoordinate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubFieldIntersectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubFieldIntersectId
		{
			get
			{
				return this._SubFieldIntersectId;
			}
			set
			{
				if ((this._SubFieldIntersectId != value))
				{
					this.OnSubFieldIntersectIdChanging(value);
					this.SendPropertyChanging();
					this._SubFieldIntersectId = value;
					this.SendPropertyChanged("SubFieldIntersectId");
					this.OnSubFieldIntersectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="Int NOT NULL")]
		public int FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstPosId", DbType="Int NOT NULL")]
		public int FirstPosId
		{
			get
			{
				return this._FirstPosId;
			}
			set
			{
				if ((this._FirstPosId != value))
				{
					if (this._GpsCoordinateFirst.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFirstPosIdChanging(value);
					this.SendPropertyChanging();
					this._FirstPosId = value;
					this.SendPropertyChanged("FirstPosId");
					this.OnFirstPosIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondPosId", DbType="Int NOT NULL")]
		public int SecondPosId
		{
			get
			{
				return this._SecondPosId;
			}
			set
			{
				if ((this._SecondPosId != value))
				{
					if (this._GpsCoordinateSecond.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecondPosIdChanging(value);
					this.SendPropertyChanging();
					this._SecondPosId = value;
					this.SendPropertyChanged("SecondPosId");
					this.OnSecondPosIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_SubFieldIntersect", Storage="_Field", ThisKey="FieldId", OtherKey="FieldId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.SubFieldIntersects.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.SubFieldIntersects.Add(this);
						this._FieldId = value.FieldId;
					}
					else
					{
						this._FieldId = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_SubFieldIntersect", Storage="_GpsCoordinateFirst", ThisKey="FirstPosId", OtherKey="PosId", IsForeignKey=true)]
		public GpsCoordinate GpsCoordinateFirst
		{
			get
			{
				return this._GpsCoordinateFirst.Entity;
			}
			set
			{
				GpsCoordinate previousValue = this._GpsCoordinateFirst.Entity;
				if (((previousValue != value) 
							|| (this._GpsCoordinateFirst.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GpsCoordinateFirst.Entity = null;
						previousValue.SubFieldIntersects.Remove(this);
					}
					this._GpsCoordinateFirst.Entity = value;
					if ((value != null))
					{
						value.SubFieldIntersects.Add(this);
						this._FirstPosId = value.PosId;
					}
					else
					{
						this._FirstPosId = default(int);
					}
					this.SendPropertyChanged("GpsCoordinateFirst");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_SubFieldIntersect1", Storage="_GpsCoordinateSecond", ThisKey="SecondPosId", OtherKey="PosId", IsForeignKey=true)]
		public GpsCoordinate GpsCoordinateSecond
		{
			get
			{
				return this._GpsCoordinateSecond.Entity;
			}
			set
			{
				GpsCoordinate previousValue = this._GpsCoordinateSecond.Entity;
				if (((previousValue != value) 
							|| (this._GpsCoordinateSecond.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GpsCoordinateSecond.Entity = null;
						previousValue.SubFieldIntersects1.Remove(this);
					}
					this._GpsCoordinateSecond.Entity = value;
					if ((value != null))
					{
						value.SubFieldIntersects1.Add(this);
						this._SecondPosId = value.PosId;
					}
					else
					{
						this._SecondPosId = default(int);
					}
					this.SendPropertyChanged("GpsCoordinateSecond");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vechile")]
	public partial class Vechile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VechileId;
		
		private string _Model;
		
		private string _Manufacturer;
		
		private float _ReceiverDistFromCenter;
		
		private float _ReceiverAngleFromCenter;
		
		private EntitySet<VechileAttach> _VechileAttaches;
		
		private EntitySet<Maintenance> _Maintenances;
		
		private EntitySet<Work> _Works;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVechileIdChanging(int value);
    partial void OnVechileIdChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnReceiverDistFromCenterChanging(float value);
    partial void OnReceiverDistFromCenterChanged();
    partial void OnReceiverAngleFromCenterChanging(float value);
    partial void OnReceiverAngleFromCenterChanged();
    #endregion
		
		public Vechile()
		{
			this._VechileAttaches = new EntitySet<VechileAttach>(new Action<VechileAttach>(this.attach_VechileAttaches), new Action<VechileAttach>(this.detach_VechileAttaches));
			this._Maintenances = new EntitySet<Maintenance>(new Action<Maintenance>(this.attach_Maintenances), new Action<Maintenance>(this.detach_Maintenances));
			this._Works = new EntitySet<Work>(new Action<Work>(this.attach_Works), new Action<Work>(this.detach_Works));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VechileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VechileId
		{
			get
			{
				return this._VechileId;
			}
			set
			{
				if ((this._VechileId != value))
				{
					this.OnVechileIdChanging(value);
					this.SendPropertyChanging();
					this._VechileId = value;
					this.SendPropertyChanged("VechileId");
					this.OnVechileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverDistFromCenter", DbType="Real NOT NULL")]
		public float ReceiverDistFromCenter
		{
			get
			{
				return this._ReceiverDistFromCenter;
			}
			set
			{
				if ((this._ReceiverDistFromCenter != value))
				{
					this.OnReceiverDistFromCenterChanging(value);
					this.SendPropertyChanging();
					this._ReceiverDistFromCenter = value;
					this.SendPropertyChanged("ReceiverDistFromCenter");
					this.OnReceiverDistFromCenterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverAngleFromCenter", DbType="Real NOT NULL")]
		public float ReceiverAngleFromCenter
		{
			get
			{
				return this._ReceiverAngleFromCenter;
			}
			set
			{
				if ((this._ReceiverAngleFromCenter != value))
				{
					this.OnReceiverAngleFromCenterChanging(value);
					this.SendPropertyChanging();
					this._ReceiverAngleFromCenter = value;
					this.SendPropertyChanged("ReceiverAngleFromCenter");
					this.OnReceiverAngleFromCenterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vechile_VechileAttach", Storage="_VechileAttaches", ThisKey="VechileId", OtherKey="VechileId")]
		public EntitySet<VechileAttach> VechileAttaches
		{
			get
			{
				return this._VechileAttaches;
			}
			set
			{
				this._VechileAttaches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vechile_Maintenance", Storage="_Maintenances", ThisKey="VechileId", OtherKey="VechileId")]
		public EntitySet<Maintenance> Maintenances
		{
			get
			{
				return this._Maintenances;
			}
			set
			{
				this._Maintenances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vechile_Work", Storage="_Works", ThisKey="VechileId", OtherKey="VechileId")]
		public EntitySet<Work> Works
		{
			get
			{
				return this._Works;
			}
			set
			{
				this._Works.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VechileAttaches(VechileAttach entity)
		{
			this.SendPropertyChanging();
			entity.Vechile = this;
		}
		
		private void detach_VechileAttaches(VechileAttach entity)
		{
			this.SendPropertyChanging();
			entity.Vechile = null;
		}
		
		private void attach_Maintenances(Maintenance entity)
		{
			this.SendPropertyChanging();
			entity.Vechile = this;
		}
		
		private void detach_Maintenances(Maintenance entity)
		{
			this.SendPropertyChanging();
			entity.Vechile = null;
		}
		
		private void attach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.Vechile = this;
		}
		
		private void detach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.Vechile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FertilizerType")]
	public partial class FertilizerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FertilizerId;
		
		private string _Name;
		
		private double _PercentOfTotalWeight;
		
		private string _Content;
		
		private EntitySet<Work> _Works;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFertilizerIdChanging(int value);
    partial void OnFertilizerIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPercentOfTotalWeightChanging(double value);
    partial void OnPercentOfTotalWeightChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public FertilizerType()
		{
			this._Works = new EntitySet<Work>(new Action<Work>(this.attach_Works), new Action<Work>(this.detach_Works));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FertilizerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FertilizerId
		{
			get
			{
				return this._FertilizerId;
			}
			set
			{
				if ((this._FertilizerId != value))
				{
					this.OnFertilizerIdChanging(value);
					this.SendPropertyChanging();
					this._FertilizerId = value;
					this.SendPropertyChanged("FertilizerId");
					this.OnFertilizerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentOfTotalWeight", DbType="Float NOT NULL")]
		public double PercentOfTotalWeight
		{
			get
			{
				return this._PercentOfTotalWeight;
			}
			set
			{
				if ((this._PercentOfTotalWeight != value))
				{
					this.OnPercentOfTotalWeightChanging(value);
					this.SendPropertyChanging();
					this._PercentOfTotalWeight = value;
					this.SendPropertyChanged("PercentOfTotalWeight");
					this.OnPercentOfTotalWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FertilizerType_Work", Storage="_Works", ThisKey="FertilizerId", OtherKey="FertilizerId")]
		public EntitySet<Work> Works
		{
			get
			{
				return this._Works;
			}
			set
			{
				this._Works.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.FertilizerType = this;
		}
		
		private void detach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.FertilizerType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SeedType")]
	public partial class SeedType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeedId;
		
		private string _Name;
		
		private string _Family;
		
		private EntitySet<Work> _Works;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeedIdChanging(int value);
    partial void OnSeedIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFamilyChanging(string value);
    partial void OnFamilyChanged();
    #endregion
		
		public SeedType()
		{
			this._Works = new EntitySet<Work>(new Action<Work>(this.attach_Works), new Action<Work>(this.detach_Works));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeedId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeedId
		{
			get
			{
				return this._SeedId;
			}
			set
			{
				if ((this._SeedId != value))
				{
					this.OnSeedIdChanging(value);
					this.SendPropertyChanging();
					this._SeedId = value;
					this.SendPropertyChanged("SeedId");
					this.OnSeedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Family", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				if ((this._Family != value))
				{
					this.OnFamilyChanging(value);
					this.SendPropertyChanging();
					this._Family = value;
					this.SendPropertyChanged("Family");
					this.OnFamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeedType_Work", Storage="_Works", ThisKey="SeedId", OtherKey="SeedId")]
		public EntitySet<Work> Works
		{
			get
			{
				return this._Works;
			}
			set
			{
				this._Works.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.SeedType = this;
		}
		
		private void detach_Works(Work entity)
		{
			this.SendPropertyChanging();
			entity.SeedType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkArea")]
	public partial class WorkArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkId;
		
		private int _PosId;
		
		private int _WorkAreaId;
		
		private EntityRef<GpsCoordinate> _GpsCoordinate;
		
		private EntityRef<Work> _Work;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkIdChanging(int value);
    partial void OnWorkIdChanged();
    partial void OnPosIdChanging(int value);
    partial void OnPosIdChanged();
    partial void OnWorkAreaIdChanging(int value);
    partial void OnWorkAreaIdChanged();
    #endregion
		
		public WorkArea()
		{
			this._GpsCoordinate = default(EntityRef<GpsCoordinate>);
			this._Work = default(EntityRef<Work>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkId", DbType="Int NOT NULL")]
		public int WorkId
		{
			get
			{
				return this._WorkId;
			}
			set
			{
				if ((this._WorkId != value))
				{
					if (this._Work.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkIdChanging(value);
					this.SendPropertyChanging();
					this._WorkId = value;
					this.SendPropertyChanged("WorkId");
					this.OnWorkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosId", DbType="Int NOT NULL")]
		public int PosId
		{
			get
			{
				return this._PosId;
			}
			set
			{
				if ((this._PosId != value))
				{
					if (this._GpsCoordinate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPosIdChanging(value);
					this.SendPropertyChanging();
					this._PosId = value;
					this.SendPropertyChanged("PosId");
					this.OnPosIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkAreaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkAreaId
		{
			get
			{
				return this._WorkAreaId;
			}
			set
			{
				if ((this._WorkAreaId != value))
				{
					this.OnWorkAreaIdChanging(value);
					this.SendPropertyChanging();
					this._WorkAreaId = value;
					this.SendPropertyChanged("WorkAreaId");
					this.OnWorkAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_WorkArea", Storage="_GpsCoordinate", ThisKey="PosId", OtherKey="PosId", IsForeignKey=true)]
		public GpsCoordinate GpsCoordinate
		{
			get
			{
				return this._GpsCoordinate.Entity;
			}
			set
			{
				GpsCoordinate previousValue = this._GpsCoordinate.Entity;
				if (((previousValue != value) 
							|| (this._GpsCoordinate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GpsCoordinate.Entity = null;
						previousValue.WorkAreas.Remove(this);
					}
					this._GpsCoordinate.Entity = value;
					if ((value != null))
					{
						value.WorkAreas.Add(this);
						this._PosId = value.PosId;
					}
					else
					{
						this._PosId = default(int);
					}
					this.SendPropertyChanged("GpsCoordinate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Work_WorkArea", Storage="_Work", ThisKey="WorkId", OtherKey="WorkId", IsForeignKey=true)]
		public Work Work
		{
			get
			{
				return this._Work.Entity;
			}
			set
			{
				Work previousValue = this._Work.Entity;
				if (((previousValue != value) 
							|| (this._Work.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Work.Entity = null;
						previousValue.WorkAreas.Remove(this);
					}
					this._Work.Entity = value;
					if ((value != null))
					{
						value.WorkAreas.Add(this);
						this._WorkId = value.WorkId;
					}
					else
					{
						this._WorkId = default(int);
					}
					this.SendPropertyChanged("Work");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrainageLines")]
	public partial class DrainageLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DrainageLineId;
		
		private int _DrainageId;
		
		private int _PosId;
		
		private int _OrderId;
		
		private EntityRef<GpsCoordinate> _GpsCoordinate;
		
		private EntityRef<Drainage> _Drainage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrainageLineIdChanging(int value);
    partial void OnDrainageLineIdChanged();
    partial void OnDrainageIdChanging(int value);
    partial void OnDrainageIdChanged();
    partial void OnPosIdChanging(int value);
    partial void OnPosIdChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    #endregion
		
		public DrainageLine()
		{
			this._GpsCoordinate = default(EntityRef<GpsCoordinate>);
			this._Drainage = default(EntityRef<Drainage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrainageLineId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DrainageLineId
		{
			get
			{
				return this._DrainageLineId;
			}
			set
			{
				if ((this._DrainageLineId != value))
				{
					this.OnDrainageLineIdChanging(value);
					this.SendPropertyChanging();
					this._DrainageLineId = value;
					this.SendPropertyChanged("DrainageLineId");
					this.OnDrainageLineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrainageId", DbType="Int NOT NULL")]
		public int DrainageId
		{
			get
			{
				return this._DrainageId;
			}
			set
			{
				if ((this._DrainageId != value))
				{
					if (this._Drainage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrainageIdChanging(value);
					this.SendPropertyChanging();
					this._DrainageId = value;
					this.SendPropertyChanged("DrainageId");
					this.OnDrainageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosId", DbType="Int NOT NULL")]
		public int PosId
		{
			get
			{
				return this._PosId;
			}
			set
			{
				if ((this._PosId != value))
				{
					if (this._GpsCoordinate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPosIdChanging(value);
					this.SendPropertyChanging();
					this._PosId = value;
					this.SendPropertyChanged("PosId");
					this.OnPosIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GpsCoordinate_DrainageLine", Storage="_GpsCoordinate", ThisKey="PosId", OtherKey="PosId", IsForeignKey=true)]
		public GpsCoordinate GpsCoordinate
		{
			get
			{
				return this._GpsCoordinate.Entity;
			}
			set
			{
				GpsCoordinate previousValue = this._GpsCoordinate.Entity;
				if (((previousValue != value) 
							|| (this._GpsCoordinate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GpsCoordinate.Entity = null;
						previousValue.DrainageLines.Remove(this);
					}
					this._GpsCoordinate.Entity = value;
					if ((value != null))
					{
						value.DrainageLines.Add(this);
						this._PosId = value.PosId;
					}
					else
					{
						this._PosId = default(int);
					}
					this.SendPropertyChanged("GpsCoordinate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drainage_DrainageLine", Storage="_Drainage", ThisKey="DrainageId", OtherKey="DrainageId", IsForeignKey=true)]
		public Drainage Drainage
		{
			get
			{
				return this._Drainage.Entity;
			}
			set
			{
				Drainage previousValue = this._Drainage.Entity;
				if (((previousValue != value) 
							|| (this._Drainage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drainage.Entity = null;
						previousValue.DrainageLines.Remove(this);
					}
					this._Drainage.Entity = value;
					if ((value != null))
					{
						value.DrainageLines.Add(this);
						this._DrainageId = value.DrainageId;
					}
					else
					{
						this._DrainageId = default(int);
					}
					this.SendPropertyChanged("Drainage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drainage")]
	public partial class Drainage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DrainageId;
		
		private string _Name;
		
		private int _Dimension;
		
		private System.Nullable<int> _ConnectedTo;
		
		private EntitySet<DrainageLine> _DrainageLines;
		
		private EntityRef<Drainage> _Drainage2;
		
		private EntityRef<Drainage> _Drainage1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrainageIdChanging(int value);
    partial void OnDrainageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDimensionChanging(int value);
    partial void OnDimensionChanged();
    partial void OnConnectedToChanging(System.Nullable<int> value);
    partial void OnConnectedToChanged();
    #endregion
		
		public Drainage()
		{
			this._DrainageLines = new EntitySet<DrainageLine>(new Action<DrainageLine>(this.attach_DrainageLines), new Action<DrainageLine>(this.detach_DrainageLines));
			this._Drainage2 = default(EntityRef<Drainage>);
			this._Drainage1 = default(EntityRef<Drainage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrainageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DrainageId
		{
			get
			{
				return this._DrainageId;
			}
			set
			{
				if ((this._DrainageId != value))
				{
					if (this._Drainage1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrainageIdChanging(value);
					this.SendPropertyChanging();
					this._DrainageId = value;
					this.SendPropertyChanged("DrainageId");
					this.OnDrainageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dimension", DbType="Int NOT NULL")]
		public int Dimension
		{
			get
			{
				return this._Dimension;
			}
			set
			{
				if ((this._Dimension != value))
				{
					this.OnDimensionChanging(value);
					this.SendPropertyChanging();
					this._Dimension = value;
					this.SendPropertyChanged("Dimension");
					this.OnDimensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConnectedTo", DbType="Int")]
		public System.Nullable<int> ConnectedTo
		{
			get
			{
				return this._ConnectedTo;
			}
			set
			{
				if ((this._ConnectedTo != value))
				{
					this.OnConnectedToChanging(value);
					this.SendPropertyChanging();
					this._ConnectedTo = value;
					this.SendPropertyChanged("ConnectedTo");
					this.OnConnectedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drainage_DrainageLine", Storage="_DrainageLines", ThisKey="DrainageId", OtherKey="DrainageId")]
		public EntitySet<DrainageLine> DrainageLines
		{
			get
			{
				return this._DrainageLines;
			}
			set
			{
				this._DrainageLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drainage_Drainage", Storage="_Drainage2", ThisKey="DrainageId", OtherKey="DrainageId", IsUnique=true, IsForeignKey=false)]
		public Drainage Drainage2
		{
			get
			{
				return this._Drainage2.Entity;
			}
			set
			{
				Drainage previousValue = this._Drainage2.Entity;
				if (((previousValue != value) 
							|| (this._Drainage2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drainage2.Entity = null;
						previousValue.Drainage1 = null;
					}
					this._Drainage2.Entity = value;
					if ((value != null))
					{
						value.Drainage1 = this;
					}
					this.SendPropertyChanged("Drainage2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drainage_Drainage", Storage="_Drainage1", ThisKey="DrainageId", OtherKey="DrainageId", IsForeignKey=true)]
		public Drainage Drainage1
		{
			get
			{
				return this._Drainage1.Entity;
			}
			set
			{
				Drainage previousValue = this._Drainage1.Entity;
				if (((previousValue != value) 
							|| (this._Drainage1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drainage1.Entity = null;
						previousValue.Drainage2 = null;
					}
					this._Drainage1.Entity = value;
					if ((value != null))
					{
						value.Drainage2 = this;
						this._DrainageId = value.DrainageId;
					}
					else
					{
						this._DrainageId = default(int);
					}
					this.SendPropertyChanged("Drainage1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DrainageLines(DrainageLine entity)
		{
			this.SendPropertyChanging();
			entity.Drainage = this;
		}
		
		private void detach_DrainageLines(DrainageLine entity)
		{
			this.SendPropertyChanging();
			entity.Drainage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Maintenance")]
	public partial class Maintenance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaintId;
		
		private System.Nullable<int> _VechileId;
		
		private System.Nullable<int> _EquipmentId;
		
		private int _Hours;
		
		private string _Description;
		
		private System.DateTime _Time;
		
		private EntityRef<Equipment> _Equipment;
		
		private EntityRef<Vechile> _Vechile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaintIdChanging(int value);
    partial void OnMaintIdChanged();
    partial void OnVechileIdChanging(System.Nullable<int> value);
    partial void OnVechileIdChanged();
    partial void OnEquipmentIdChanging(System.Nullable<int> value);
    partial void OnEquipmentIdChanged();
    partial void OnHoursChanging(int value);
    partial void OnHoursChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public Maintenance()
		{
			this._Equipment = default(EntityRef<Equipment>);
			this._Vechile = default(EntityRef<Vechile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaintId
		{
			get
			{
				return this._MaintId;
			}
			set
			{
				if ((this._MaintId != value))
				{
					this.OnMaintIdChanging(value);
					this.SendPropertyChanging();
					this._MaintId = value;
					this.SendPropertyChanged("MaintId");
					this.OnMaintIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VechileId", DbType="Int")]
		public System.Nullable<int> VechileId
		{
			get
			{
				return this._VechileId;
			}
			set
			{
				if ((this._VechileId != value))
				{
					if (this._Vechile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVechileIdChanging(value);
					this.SendPropertyChanging();
					this._VechileId = value;
					this.SendPropertyChanged("VechileId");
					this.OnVechileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentId", DbType="Int")]
		public System.Nullable<int> EquipmentId
		{
			get
			{
				return this._EquipmentId;
			}
			set
			{
				if ((this._EquipmentId != value))
				{
					if (this._Equipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEquipmentIdChanging(value);
					this.SendPropertyChanging();
					this._EquipmentId = value;
					this.SendPropertyChanged("EquipmentId");
					this.OnEquipmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hours", DbType="Int NOT NULL")]
		public int Hours
		{
			get
			{
				return this._Hours;
			}
			set
			{
				if ((this._Hours != value))
				{
					this.OnHoursChanging(value);
					this.SendPropertyChanging();
					this._Hours = value;
					this.SendPropertyChanged("Hours");
					this.OnHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_Maintenance", Storage="_Equipment", ThisKey="EquipmentId", OtherKey="EquipmentId", IsForeignKey=true)]
		public Equipment Equipment
		{
			get
			{
				return this._Equipment.Entity;
			}
			set
			{
				Equipment previousValue = this._Equipment.Entity;
				if (((previousValue != value) 
							|| (this._Equipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipment.Entity = null;
						previousValue.Maintenances.Remove(this);
					}
					this._Equipment.Entity = value;
					if ((value != null))
					{
						value.Maintenances.Add(this);
						this._EquipmentId = value.EquipmentId;
					}
					else
					{
						this._EquipmentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Equipment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vechile_Maintenance", Storage="_Vechile", ThisKey="VechileId", OtherKey="VechileId", IsForeignKey=true)]
		public Vechile Vechile
		{
			get
			{
				return this._Vechile.Entity;
			}
			set
			{
				Vechile previousValue = this._Vechile.Entity;
				if (((previousValue != value) 
							|| (this._Vechile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vechile.Entity = null;
						previousValue.Maintenances.Remove(this);
					}
					this._Vechile.Entity = value;
					if ((value != null))
					{
						value.Maintenances.Add(this);
						this._VechileId = value.VechileId;
					}
					else
					{
						this._VechileId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Vechile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Work]")]
	public partial class Work : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkId;
		
		private System.DateTime _Time;
		
		private System.Nullable<int> _FertilizerId;
		
		private System.Nullable<int> _SeedId;
		
		private System.Nullable<double> _AmountOfInput;
		
		private double _FuelUsed;
		
		private int _VechileId;
		
		private int _EquipmentId;
		
		private int _FieldId;
		
		private double _Area;
		
		private System.Nullable<double> _HarvestedAmount;
		
		private EntitySet<WorkArea> _WorkAreas;
		
		private EntityRef<Equipment> _Equipment;
		
		private EntityRef<FertilizerType> _FertilizerType;
		
		private EntityRef<Field> _Field;
		
		private EntityRef<SeedType> _SeedType;
		
		private EntityRef<Vechile> _Vechile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkIdChanging(int value);
    partial void OnWorkIdChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnFertilizerIdChanging(System.Nullable<int> value);
    partial void OnFertilizerIdChanged();
    partial void OnSeedIdChanging(System.Nullable<int> value);
    partial void OnSeedIdChanged();
    partial void OnAmountOfInputChanging(System.Nullable<double> value);
    partial void OnAmountOfInputChanged();
    partial void OnFuelUsedChanging(double value);
    partial void OnFuelUsedChanged();
    partial void OnVechileIdChanging(int value);
    partial void OnVechileIdChanged();
    partial void OnEquipmentIdChanging(int value);
    partial void OnEquipmentIdChanged();
    partial void OnFieldIdChanging(int value);
    partial void OnFieldIdChanged();
    partial void OnAreaChanging(double value);
    partial void OnAreaChanged();
    partial void OnHarvestedAmountChanging(System.Nullable<double> value);
    partial void OnHarvestedAmountChanged();
    #endregion
		
		public Work()
		{
			this._WorkAreas = new EntitySet<WorkArea>(new Action<WorkArea>(this.attach_WorkAreas), new Action<WorkArea>(this.detach_WorkAreas));
			this._Equipment = default(EntityRef<Equipment>);
			this._FertilizerType = default(EntityRef<FertilizerType>);
			this._Field = default(EntityRef<Field>);
			this._SeedType = default(EntityRef<SeedType>);
			this._Vechile = default(EntityRef<Vechile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkId
		{
			get
			{
				return this._WorkId;
			}
			set
			{
				if ((this._WorkId != value))
				{
					this.OnWorkIdChanging(value);
					this.SendPropertyChanging();
					this._WorkId = value;
					this.SendPropertyChanged("WorkId");
					this.OnWorkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FertilizerId", DbType="Int")]
		public System.Nullable<int> FertilizerId
		{
			get
			{
				return this._FertilizerId;
			}
			set
			{
				if ((this._FertilizerId != value))
				{
					if (this._FertilizerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFertilizerIdChanging(value);
					this.SendPropertyChanging();
					this._FertilizerId = value;
					this.SendPropertyChanged("FertilizerId");
					this.OnFertilizerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeedId", DbType="Int")]
		public System.Nullable<int> SeedId
		{
			get
			{
				return this._SeedId;
			}
			set
			{
				if ((this._SeedId != value))
				{
					if (this._SeedType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeedIdChanging(value);
					this.SendPropertyChanging();
					this._SeedId = value;
					this.SendPropertyChanged("SeedId");
					this.OnSeedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountOfInput", DbType="Float")]
		public System.Nullable<double> AmountOfInput
		{
			get
			{
				return this._AmountOfInput;
			}
			set
			{
				if ((this._AmountOfInput != value))
				{
					this.OnAmountOfInputChanging(value);
					this.SendPropertyChanging();
					this._AmountOfInput = value;
					this.SendPropertyChanged("AmountOfInput");
					this.OnAmountOfInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelUsed", DbType="Float NOT NULL")]
		public double FuelUsed
		{
			get
			{
				return this._FuelUsed;
			}
			set
			{
				if ((this._FuelUsed != value))
				{
					this.OnFuelUsedChanging(value);
					this.SendPropertyChanging();
					this._FuelUsed = value;
					this.SendPropertyChanged("FuelUsed");
					this.OnFuelUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VechileId", DbType="Int NOT NULL")]
		public int VechileId
		{
			get
			{
				return this._VechileId;
			}
			set
			{
				if ((this._VechileId != value))
				{
					if (this._Vechile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVechileIdChanging(value);
					this.SendPropertyChanging();
					this._VechileId = value;
					this.SendPropertyChanged("VechileId");
					this.OnVechileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentId", DbType="Int NOT NULL")]
		public int EquipmentId
		{
			get
			{
				return this._EquipmentId;
			}
			set
			{
				if ((this._EquipmentId != value))
				{
					if (this._Equipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEquipmentIdChanging(value);
					this.SendPropertyChanging();
					this._EquipmentId = value;
					this.SendPropertyChanged("EquipmentId");
					this.OnEquipmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="Int NOT NULL")]
		public int FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Float NOT NULL")]
		public double Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HarvestedAmount", DbType="Float")]
		public System.Nullable<double> HarvestedAmount
		{
			get
			{
				return this._HarvestedAmount;
			}
			set
			{
				if ((this._HarvestedAmount != value))
				{
					this.OnHarvestedAmountChanging(value);
					this.SendPropertyChanging();
					this._HarvestedAmount = value;
					this.SendPropertyChanged("HarvestedAmount");
					this.OnHarvestedAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Work_WorkArea", Storage="_WorkAreas", ThisKey="WorkId", OtherKey="WorkId")]
		public EntitySet<WorkArea> WorkAreas
		{
			get
			{
				return this._WorkAreas;
			}
			set
			{
				this._WorkAreas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_Work", Storage="_Equipment", ThisKey="EquipmentId", OtherKey="EquipmentId", IsForeignKey=true)]
		public Equipment Equipment
		{
			get
			{
				return this._Equipment.Entity;
			}
			set
			{
				Equipment previousValue = this._Equipment.Entity;
				if (((previousValue != value) 
							|| (this._Equipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipment.Entity = null;
						previousValue.Works.Remove(this);
					}
					this._Equipment.Entity = value;
					if ((value != null))
					{
						value.Works.Add(this);
						this._EquipmentId = value.EquipmentId;
					}
					else
					{
						this._EquipmentId = default(int);
					}
					this.SendPropertyChanged("Equipment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FertilizerType_Work", Storage="_FertilizerType", ThisKey="FertilizerId", OtherKey="FertilizerId", IsForeignKey=true)]
		public FertilizerType FertilizerType
		{
			get
			{
				return this._FertilizerType.Entity;
			}
			set
			{
				FertilizerType previousValue = this._FertilizerType.Entity;
				if (((previousValue != value) 
							|| (this._FertilizerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FertilizerType.Entity = null;
						previousValue.Works.Remove(this);
					}
					this._FertilizerType.Entity = value;
					if ((value != null))
					{
						value.Works.Add(this);
						this._FertilizerId = value.FertilizerId;
					}
					else
					{
						this._FertilizerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FertilizerType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Work", Storage="_Field", ThisKey="FieldId", OtherKey="FieldId", IsForeignKey=true)]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.Works.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.Works.Add(this);
						this._FieldId = value.FieldId;
					}
					else
					{
						this._FieldId = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeedType_Work", Storage="_SeedType", ThisKey="SeedId", OtherKey="SeedId", IsForeignKey=true)]
		public SeedType SeedType
		{
			get
			{
				return this._SeedType.Entity;
			}
			set
			{
				SeedType previousValue = this._SeedType.Entity;
				if (((previousValue != value) 
							|| (this._SeedType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SeedType.Entity = null;
						previousValue.Works.Remove(this);
					}
					this._SeedType.Entity = value;
					if ((value != null))
					{
						value.Works.Add(this);
						this._SeedId = value.SeedId;
					}
					else
					{
						this._SeedId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SeedType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vechile_Work", Storage="_Vechile", ThisKey="VechileId", OtherKey="VechileId", IsForeignKey=true)]
		public Vechile Vechile
		{
			get
			{
				return this._Vechile.Entity;
			}
			set
			{
				Vechile previousValue = this._Vechile.Entity;
				if (((previousValue != value) 
							|| (this._Vechile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vechile.Entity = null;
						previousValue.Works.Remove(this);
					}
					this._Vechile.Entity = value;
					if ((value != null))
					{
						value.Works.Add(this);
						this._VechileId = value.VechileId;
					}
					else
					{
						this._VechileId = default(int);
					}
					this.SendPropertyChanged("Vechile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkAreas(WorkArea entity)
		{
			this.SendPropertyChanging();
			entity.Work = this;
		}
		
		private void detach_WorkAreas(WorkArea entity)
		{
			this.SendPropertyChanging();
			entity.Work = null;
		}
	}
}
#pragma warning restore 1591
